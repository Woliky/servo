#include "stm8s.h"
#include "milis.h"
#include "spse_stm8.h"
#include "stm8_hd44780.h"
#include "stdio.h"

void init_pwm(void);
void process_enc(void);
uint8_t x=25,minule=1,hodnota=0,last=0;
uint8_t text[32];
uint16_t pulz=3125;

void main(void){
	
CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1); // 16MHz z interního RC oscilátoru

init_milis(); 
lcd_init();//inicializace LCD

GPIO_Init(GPIOD,GPIO_PIN_4,GPIO_MODE_OUT_PP_LOW_SLOW);//anoda ledky
GPIO_Init(GPIOF,GPIO_PIN_6,GPIO_MODE_IN_PU_NO_IT);//encoder kanál 1
GPIO_Init(GPIOF,GPIO_PIN_7,GPIO_MODE_IN_PU_NO_IT);//encoder kanál 2
GPIO_Init(GPIOF,GPIO_PIN_5,GPIO_MODE_IN_PU_NO_IT);//tlačítko encoderu
lcd_clear();//touto funkcí vyčistíme displej
  while (1){
		
		
		if(GPIO_ReadInputPin(GPIOB,GPIO_PIN_0) == RESET && last==1){
			last=0;
			x++; 
		}
		
		if(GPIO_ReadInputPin(GPIOB,GPIO_PIN_0) != RESET){last = 1;}
		//první stisk tlačítka
		//if(x==1){
		//	
		//}
		//druhý stisk, měnění šířky pulzu
		if(x==2){
			x=0;
			TIM2_SetCompare1(pulz);
			
			sprintf(text,"%u",pulz);//převedeme číslo na řetězec
			lcd_gotoxy(1,1);
			lcd_puts(text);
		}
		process_enc();//fce pro ncoder
	}	
}


void process_enc(void){
	
	if(GPIO_ReadInputPin(GPIOF,GPIO_PIN_7) == RESET && minule==1){// vpodstatě jako kontrola tlačítka
		minule = 0; 
		if(GPIO_ReadInputPin(GPIOF,GPIO_PIN_6) == RESET){//pokud je "stiskunuto" i druhé tak přičítám
			hodnota++;
			if(x==2){//pokud je tlačítko stisknuto podruhé	
				pulz=pulz+313;//přidáme 10ms
			if(pulz < 3125){pulz=3125;}
			if(pulz > 25000){pulz=25000;}
			}
			
		}else{//jinak odčítám
			hodnota--;
		}
	}
	if(GPIO_ReadInputPin(GPIOF,GPIO_PIN_7) != RESET){minule = 1;} 
}

void init_pwm(void){
// nastavíme piny PD2,PD3,PD4 jako výstupy (kanály TIM2, kanál TIM_CH3 reampován z pinu PA3 na PD2)
TIM2_TimeBaseInit(TIM2_PRESCALER_512,31250);

TIM2_OC1Init( 							// inicializujeme kanál 1 (TM2_CH1)
	TIM2_OCMODE_PWM1, 				// režim PWM1
	TIM2_OUTPUTSTATE_ENABLE,	// Výstup povolen (TIMer ovládá pin)
	3125,		                    // výchozí hodnota šířky pulzu
	TIM2_OCPOLARITY_HIGH			// Zátěž rozsvěcíme hodnotou HIGH 
	);
	
TIM2_OC1PreloadConfig(ENABLE);
TIM2_Cmd(ENABLE);
}






// pod tímto komentářem nic neměňte 
#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif